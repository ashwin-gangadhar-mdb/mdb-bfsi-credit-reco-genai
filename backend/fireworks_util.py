from langchain_fireworks import Fireworks
from typing import Any, Dict, List, Optional
import requests
from langchain_core.callbacks import (
    CallbackManagerForLLMRun,
)
class FireworksWithTrace(Fireworks):
    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        headers = {
            "Authorization": f"Bearer {self.fireworks_api_key.get_secret_value()}",
            "Content-Type": "application/json",
            "X-Fireworks-Genie": "true"
        }
        """Call out to Fireworks's text generation endpoint.

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model..
        """
        stop_to_use = stop[0] if stop and len(stop) == 1 else stop
        payload: Dict[str, Any] = {
            **self.default_params,
            "prompt": prompt,
            "stop": stop_to_use,
            **kwargs,
        }

        # filter None values to not pass them to the http payload
        payload = {k: v for k, v in payload.items() if v is not None}
        response = requests.post(url=self.base_url, json=payload, headers=headers)

        if response.status_code >= 500:
            raise Exception(f"Fireworks Server: Error {response.status_code}")
        elif response.status_code >= 400:
            raise ValueError(f"Fireworks received an invalid payload: {response.text}")
        elif response.status_code != 200:
            raise Exception(
                f"Fireworks returned an unexpected response with status "
                f"{response.status_code}: {response.text}"
            )

        data = response.json()
        output = self._format_output(data)

        return output